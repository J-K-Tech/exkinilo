import java.util.regex.Matcher

buildscript {
	repositories {
        mavenCentral()
        maven { url 'https://cdn.fox2code.com/maven' }
        maven { url 'https://jitpack.io/' }
    }
    dependencies {
        classpath('com.fox2code.FoxLoader:dev:1.3.0')
    }
}


plugins {
    id 'net.researchgate.release' version '3.0.2'
}
apply plugin: 'foxloader.dev'


version project.properties['version']
foxloader {
    // forceReload = true
    modId = "exkinilo"
    modName = "ex kinilo"
    modVersion = project.version
    modDesc = "superflat survival progression!"
    clientMod = "kn.jktech.exkinilo.clinilo"
    serverMod = "kn.jktech.exkinilo.sernilo"
    // Development tools don't like that both client and server define
    // the same classes, so uncomment to disable the side inclusion.
    // includeClient = false
    // includeServer = false
}
task packageReleaseJar(type: Jar) {
    archiveClassifier.set("release")
    from sourceSets.main.output
}
task uploadToGitHubRelease {
    doLast {
        def githubToken = project.findProperty("githubToken")
        def tagName = project.properties['version']  // Adjust the tag name dynamically

        def releaseId = new groovy.json.JsonSlurper().parseText(
                "curl -X POST -H 'Authorization: token ${githubToken}' -H 'Content-Type: application/json' \
            https://api.github.com/repos/J-K-Tech/exkinilo/releases \
            -d '{\"tag_name\": \"${tagName}\"}'".execute().text
        ).id

        def filePath = "build/libs/exkinilo-"+project.properties['version']+".jar"
        def uploadUrl = "https://uploads.github.com/repos/J-K-Tech/exkinilo/releases/${releaseId}/assets?name=${filePath.split('/').last()}"

        "curl -X POST -H 'Authorization: token ${githubToken}' \
        -H 'Content-Type: application/java-archive' --data-binary @${filePath} ${uploadUrl}".execute().text
    }
}
release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = false
    failOnUpdateNeeded = false
    revertOnFail = false
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate =project.properties['version']
    versionPropertyFile = 'gradle.properties'
    versionProperties = ['version']
    snapshotSuffix = '-SNAPSHOT'
    buildTasks = ["build","packageReleaseJar","uploadToGitHubRelease"]
    ignoredSnapshotDependencies = []
    versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
    ]
    pushReleaseVersionBranch = null
    scmAdapters = [
            net.researchgate.release.GitAdapter,
            net.researchgate.release.SvnAdapter,
            net.researchgate.release.HgAdapter,
            net.researchgate.release.BzrAdapter
    ]

    git {
        requireBranch.set('master')
        pushToRemote.set('origin')
        pushToBranchPrefix.set('')
        commitVersionFileOnly.set(false)
        signTag.set(false)
    }

    svn {
        username.set(null)
        password.set(null)
        pinExternals.set(false)   // allows to pin the externals when tagging, requires subversion client >= 1.9.0
    }
}